What is Node.js?

It is a Javascript runtime built on Chrome V8 Javascript Engine;Initiated by Ryan Dahl in 2009;
The Chrome V8 engine is itself derived from the Chromium project, and the Chrome V8 engine was designed for running JavaScript 
in the browser.
When the V8 engine is separated from the browser and made available on the machine, you can have an environment built for running Javascript
applications on your computer separate from the browswer;

-> Uses an event-driven, non-blocking I/O model, this makes it light weight and efficient;
Node runs as a single threaded application but still is able to service a large number of requests because of the way node applications are
designed, in particular asynchronous programming , asyncronous I/O model, callbacks features and some of the Javascript feature itself
like - first class function in Javascript and callback support in Javascript;

Node Architecture
-----------------
Node runtime can be viewed as a multilayered architecture;

------------------------------------------------------------------------------------------------------------------------
              Node Core / Standard Library (JS)
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
               Node Bindings (C++)
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------              --------------------------------------------
    Chrome V8 (C++)                                                         libuv(C)
---------------------------------------------------------           ---------------------------------------------    
Bottom Layer -> Chrome V8 engine -> written in C++; libuv -> enables to interact with the underlying hardware;
Middle Layer -> Node Bindings (C++);
Top Layer -> Node Core or standard library;

Node.js Use Cases
--------------------
1. Utilities written in Javascript for web development -> Bower, Grunt, Gulp, Yeoman, etc;
2. Server-side Development -> Web Server, Business logic, Database access;

NPM(Node Package Manager)
---------------------------
Manages the ecosystem of node modules/packages;
-> A Package contains:
------------------------
i. JS file
ii. package.json (manifest)
-------------------------------------------------------------------------------------------------------------------------------------
Node Modules
------------
JavaScript Modules
-----------------
-> JavaScript was initially defined for the web it does not define a standard library;
-> But now it is used to run server side code as well;
-> The CommonJS API came in to fill in this gap by defining APIs for typical common application needs and providing it a standard 
library;
-> When CommonJS came in, it used a module format to be used when you design your libraries;
-> Nodejs allows to write javascript applications that run outside the browser, then Node.js adopted the common JS module format.
-> That's what Node.js uses to organize the code.

More about Node Modules
---------------------
-> Each file in the Node is its own module;The boundary is a file;
-> The module variable gives access to the current module definition in the file;
-> The module.exports variable determines the export from the current module;
-> The require function is used to import a module;

Module Example
--------------------------------------------------------------------

a. rectangle module:
-----------------------
module.exports = function() {
  return {
    perimeter: function(x, y) {return(2 * (x+y));},
    area: function(x, y) { return(x*y);}
  };
}

(or)
//exports is alias for module.exports

exports.perimeter = function(x,y) {
  return (2*(x+y));
}

exports.area = function(x,y){
  return (x*y);
}

b. Using this module:
--------------------------
var rect = require('./rectangle);

------------------------------------------------
Running in the terminal -> cmd within the project folder:
-> node filename;
------------------------------------------------------------------------------------
Node Modules: Callbacks and Error Handlings

-> 2 Salient Features of JavaScript
-------------------------------------
a. First-Class functions -> A function can be treated the same way as any other variable;
-------------------------
b. Closures -> 
------------
A function defined inside another function has access to all the variables declared in the outer function (outer scope);
The inner function will continue to have access to the variables from the outer scope even after the outer function
has returned;

Node applications make use of asynchronous programming;
---------------------------------------------------------------------------------------------------------------------------
Asynchronous programming
-------------------------

** Synchronous Programming:-
-> Programs written in C, C++, JAVA, C# - synchronous programs - pieces of code are written , arranged in a sequence 
and executed in a sequence;
If among these a long running process comes in, it delays all the subsequent computation, cause until it complete
execution the remaining cannot execute;

----------------------
computation 1
----------------------
   |
  \ /
----------------------
Long Running
computation or I/O
----------------------
   |
  \ /
----------------------
Computation 2
----------------------
    |
   \ /
----------------------
Computation 3
----------------------
  

** In asynchronous programming
--------------------------
If there are other independent process that are not impacted by the long-running code/process/I/O , then that will also
simultaneously run, incase any process is dependent on the long running process, then it must be executes only after
the completion of the long running process;Here callbacks are important since, after completion of the long-running processes,
the dependent processes can be called;

----------------------
Computation 1       ----------------------------
----------------------                          |
    |                                           |
   \ /                                         \ /
----------------------      -------------------------------------------------
Computation 3                     Long Running computation or I/O
----------------------       -------------------------------------------------
                                                    |
     ------------------------------------------------
    |                                          
   \ /
------------------------
  Callback
-------------------------
Callback -> Javascript function that is passes as a callback to this long running task on completion of the process;
----------------------------------------------------------------------------------------------------------------------
-> Node, Async I/O and Callbacks
----------------------------
* The node environment consists of a single threaded Event Loop that is running around;
* It picks up a request from the queue , services the request, so on;
* Some of the requests may trigger an I/O , and if it is a blocking call, then your event loop will get stuck 
until the I/O operation is completed;
* With node because of the fact that there is support for callbacks with the Javascript first-class functions and 
closures, when you are triggering of the I/O request with the promise that when it completed, come back and call the 
callback functions that you supplied to it;

So in the event loop you're branching off and then continuing with the subsequent execution by handling for the request
from your request queue, hence the event loop never gets blocked;

Hence the event loop is always busy, either executing an incoming request or executing a callback that came in when
an I/O request is completed; A callback which is a function will be put in this request queue and that will be 
executed in due course when its turn comes;

        request
     \   | | | |  |  |  |                |                           |      request ->>>        | File/     |
    -- \ | | | |  |  |  |----------------| Event Loop(Single thread) |                          | Database/ | 
   |  /  | | | |  |  |  |                |                           | <<-I/O requestcompletion | Processing|
   |                                               |
   |                                               |
   |------------------------------------------------
            Callback
   
   Node's convention
   ------------------
   -> 1st parameter for the node callback is an error; 2nd parameter ->  null;
   
   callback(error, null);
   in else callback(null, {
    perimeter: function() {return (2*(x+y));},
    area: function() {return (x*y);}
   });
   cause of closure, x and y can be accessible inside the function;
   
   function(parameters, callback(error,function() {}))
   --------------------------------------------------------------------------------------------------------------------
   Node modules ++
   ---------------
   Node modules are of 3 types
   ----------------------
   a. File-based 0> design our own modules;
   b. Core Modules - Part of core Node; path, fs, os, util,...
   c. External Node modules -> 3 party, installed using NPM, node_modules folder;
   
   Using the node module
   ----------------------
   -> Include them using the require function;
   -> File-based modules:
   a. require('./module_name')
   b. specify the relative/full path to fie;
   
   -> core/extrnam modules
     a. require('./module_name')
     node_modules or within it; up the folger hierarchy until the module is found;
     
     Tour within a node_module
     ------------------------
     -> index.js -> starting file;
     -> package.json
     -> node_modules (dependent modules);
     
     Versions -> Semantic versioning system, 3 digits -> major, minor, patch version;
   --------------------------------------------------------------------------------------------
   Semantic Versioning
   -------------------
   <Major Version>.<Minor Version>.<Patch>;
   Exact : npm install express@4.0.0
   patch: acceptable higher: npm install express@"~4.0.0"
   minor version: npm install express@"^4.0.0"
------------------------------------------------------------------------------------------------------------------
yargs -> command line arguments supplied to the node application;
------------------------------------------------------------------------------------------------------------------

